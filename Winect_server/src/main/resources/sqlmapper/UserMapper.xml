<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">

	<!-- 회원가입처리 -->
	<insert id='join'>
		INSERT INTO users(id, userid, password, username, create_time, update_time)
		VALUES (gen_random_uuid(), #{userId}, #{password}, #{userName}, NOW(), NOW())
	</insert>
	
	<!-- 수퍼매니저 회원가입 처리 -->
	<insert id='userRoles'>
		INSERT INTO user_roles(user_id, role_id, is_confirm, create_time, update_time)
		VALUES (#{userId}::UUID, #{roleId}::UUID, true, NOW(), NOW())
	</insert>
	
	<!-- 수퍼매니저조회 -->
	<select id='superId' resultType="String">
		SELECT id
		  FROM roles
		 WHERE rolename = 'super_winect'
 	</select>
 	
	<!-- 회원가입된 UUID조회 -->
	<select id='uuid' resultType="String">
		SELECT id
		  FROM users
		 WHERE userid = #{userId}
 	</select>
	
	<!-- 회원정보수정 -->
	<update id='userProfileUpdate'>
		UPDATE users
		   SET email = #{userEmail},
		   	   phone = #{userPhoneNumber},
		   	   username = #{userName}
		 WHERE userid = #{userId}
	</update>
	
	<!-- 비밀번호변경 -->
	<update id='userPasswordUpdate'>
		UPDATE users
		   SET password = #{newPassword}
		 WHERE userid = #{userId}
	</update>
	
	<!-- 로그인시간 -->
	<update id='userLogin'>
		UPDATE users
		   SET login_time = NOW()
		 WHERE id = #{uuid}::UUID
	</update>
	
	<!-- 아이디중복체크 -->
	<select id='userId' resultType="String">
		SELECT userid
		  FROM users
		 WHERE userid = #{userId}
	</select>

	<!-- 비밀번호체크 -->
	<select id='userPw' resultType='String'>
		SELECT password 
		  FROM users
		 WHERE userid = #{userId}
	</select>
	
	<!-- 로그인처리 -->
	<select id='login' resultType='com.example.demo.vo.UserVO'>
		SELECT userid, password 
		  FROM users
		 WHERE userid = #{userId}
	</select>
	
	<!-- refreshToken 저장 -->
<!-- 	<insert id='refreshToken'>
		INSERT INTO user_tokens(user_id, token, expiry_time, create_time, update_time)
		VALUES (#{userId}::UUID, #{token}::UUID, #{expiryTime}, #{createTime}, #{updateTime})
	</insert> -->
	
	<insert id='refreshToken'>
		INSERT INTO user_tokens(user_id, token, expiry_time, create_time,
		update_time)
		VALUES (#{userId}::UUID, #{token}::UUID, #{expiryTime}, #{createTime}, #{updateTime})
		    ON CONFLICT (user_id)
 DO UPDATE SET token = excluded.token, expiry_time = excluded.expiry_time,
		       create_time = excluded.create_time, update_time = excluded.update_time
	</insert>
		
	<!-- refreshToken 맞는지 확인 -->
	<select id='refreshToken_chk' resultType='String'>
		SELECT *
		  FROM user_tokens
		 WHERE user_id = #{userId}::UUID
	</select>
	
	<!-- refreshToken -->
	<select id='refreshTokenChkId' resultType='String'>
		SELECT user_id
		  FROM user_tokens
		 WHERE token = #{token}::UUID
	</select>
	
	<!-- users테이블의 uuid를 통한 id추출 -->
	<select id="usersTableid"  resultType='String'>
		SELECT userid
		  FROM users
		 WHERE id = #{id}::UUID
	</select>
	
	<!-- refreshToken id 추출 -->
	<select id='tokenUserId' resultType='String'>
		SELECT user_id
		  FROM user_tokens
		 WHERE token = #{token}::UUID
	</select>
	
	<!-- refreshToken 삭제 -->
	<delete id="refreshToken_delete">
		DELETE FROM user_tokens
		 WHERE token = #{userId}::UUID
	</delete>


</mapper>